#!/usr/bin/env bash

# https://gist.github.com/waylan/4080362

brew_prefix="$(brew --prefix)"

# Echo to strerr
function errcho() {
  # echo to strerr
  >&2 echo "$@"
}

# Die with message to stderr and exit code
function die() {
  errcho "$1"
  exit "$2"
}

accpl_self="${0##/*/}"

# shellcheck source=/dev/null
[[ -f "${0%/*}/../lib/bash/colors.sh" ]] && source "${0%/*}/../lib/bash/colors.sh"

function accpl.help() {
  cat <<EOT
Usage: $accpl_self <subcommand> [options]

  System Helper Subcommands:
    rd        Restart DnsMasq/mDNSResponder
    rm        Restart MariaDB/MySQL

    rdk       Restart Dock
    rf        Restart Finder
    rl        Restart locate database
    rmb       Restart MenuBar
    raud      Restart Core Audio Daemon (Mic and such)
    rcam      Restart VDCAssistant (Video Camera)

    th        Toggle Hidden files (AppleShowAllFiles)

    fh        Finder Shows: \$HOME
    famf      Finder Shows: All My Files

    tellit    Tell App iTunes to ... '\$1'
    togg_app  Toggle Visibility of App, passed as "\$1"

    caff      Run caffeinate
    os        Run opensnoop
    pl        Run "plutil -convert xml1 -o -" in a loop for \$@
                ("-convert" is *destructive* without the "-o -")
    ql        Run Quick Look (qlmanage -p "\$@")

    gifify    Create an animated .gif from QuickTime Player .mov passed as \$1
                Example: $accpl_self gifify example.mov [max width (pixels)]
    sl        Run: mdfind -name \$@ (no Reg Exp)

    hda       Run: hdiutil attach \$1
    hdc       Run: hdiutil compact \$1
    hdcr      Run: hdiutil create "\$1" -encryption AES-128 -size "\$2" -volname "\$3" -fs JHFS+
                   # \$1=~/Path/To/ImageName.sparsebundle, \$2=20g, \$3=ImageName
    hdd       Run: hdiutil detach \$1
                   # \$1=/Volumes/ImageName
    hdr       Run: hdiutil resize \$1 \$2
                   # \$1=20g \$2=~/Path/To/ImageName.sparsebundle

    vv        Run: diskutil verifyvolume \$1
                  # \$1=/path/to/mountpoint
  Homebrew Helper Subcommands: poorly documented, and sequences of commands
    bcmd      Run: brew commands (\$HOMEBREW_PREFIX/Library/Homebrew/cmd)
    buu       Run: brew update --verbose; brew upgrade --all; brew cleanup -n -s
    bdeps     Runs: brew deps (dependencis,) on list of installed brews
    buses     Runs: brew uses --installed, on list of installed brews
    penmod    Enable:  Brew PHP $brew_prefix/etc/php/*/conf.d/ext-\$@.conf
    pdismod   Disable: Brew PHP $brew_prefix/etc/php/*/conf.d/ext-\$@.conf

  Misc.
    cgu       Run: composer global update

EOT
}

function accpl.__tell() {
  local app="$1"
  shift

  osascript -e "
if application \"$app\" is running then
  tell app \"$app\" to $*
else
  if ((system attribute \"QUIET\" as string) is not equal to \"true\") then
    say \"$app is not running.\"
  end if
end if"
}

function accpl.__verbose_run() {
  errcho "Running: $*"
  "$@"
}

# Apple Defaults Write
function accpl.__adw() {
  local domain="$1"
  shift
  accpl.__verbose_run defaults write "com.apple.$domain" "$@"
}

# Apple Defaults Read
function accpl.__adr() {
  local domain="$1"
  shift
  defaults read "com.apple.$domain" "$@"
}

# Apple Defaults Toggle
function accpl.__adt() {
  accpl.__adw "$@" -bool "$([[ "$(accpl.__adr "$@")" =~ 1|yes|YES|true|TRUE ]] && echo NO || echo YES)"
}

function accpl.__brew() {
  accpl.__verbose_run brew "$@"
}

function accpl.__hdiutil() {
  accpl.__verbose_run hdiutil "$@"
}

function accpl.__ka() {
  accpl.__verbose_run killall -KILL "$1"
}

function accpl.__reload_plist() {
  local plist="$1"
  local _sudo=''

  if [[ "$plist" =~ ^/Library/ ]] || [[ "$plist" =~ ^/System/Library/ ]]; then
    _sudo='sudo'
  fi

  if [[ -f "$plist" ]]; then
    # man launchctl: -w Overrides the Disabled key and sets it to false or true
    accpl.__verbose_run $_sudo launchctl unload -w "$plist"
    accpl.__verbose_run $_sudo launchctl load   -w "$plist"
  else
    errcho "$plist NOT FOUND!"
  fi
}

function accpl.ra() {
  die "Restart Apache (ra) moved to accomplice" 127
}

function accpl.rd() {
  accpl.__reload_plist '/Library/LaunchDaemons/homebrew.mxcl.dnsmasq.plist'
  accpl.__reload_plist '/System/Library/LaunchDaemons/com.apple.mDNSResponder.plist'
}

function accpl.rm() {
  local db

  for db in mariadb mysql; do
    if [[ -f "$HOME/Library/LaunchAgents/homebrew.mxcl.${db}.plist" ]]; then
      accpl.__reload_plist "$HOME/Library/LaunchAgents/homebrew.mxcl.${db}.plist"
    fi
  done
}

function accpl.rp() {
  die "Restart PHP-FPM (rp) moved to accomplice" 127
}

# http://www.thxbye.de/mac/mac-restarting-the-mac-os-x-dock-finder-spaces-or-menubar.html
function accpl.rdk() {
  accpl.__ka Dock
}

function accpl.rf() {
  accpl.__ka Finder
}

function accpl.rmb() {
  accpl.__ka SystemUIServer
}

function accpl.raud() {
  accpl.__verbose_run sudo killall -KILL coreaudiod
}

function accpl.rcam() {
  accpl.__verbose_run sudo killall -KILL VDCAssistant
}

function accpl.rl() {
  # Hmm... "supposed" to be called w/ "-w" option. Just noting it for now.
  accpl.__reload_plist '/System/Library/LaunchDaemons/com.apple.locate.plist'
}

function accpl.th() {
  # http://www.macosxtips.co.uk/index_files/quickly-show-hidden-files.php
  # Bind: cmd-shift-. to:
  #   bash /path/to/this/script/maccomplice th
  # in, for example, BetterTouchTool
  accpl.__adt finder AppleShowAllFiles
  accpl.rf
}

function accpl.fh() {
    accpl.__adw finder NewWindowTarget PfHm
    accpl.__adw finder NewWindowTargetPath "file://$HOME/"
}

function accpl.famf() {
    accpl.__adw finder NewWindowTarget PfAF
    #accpl.__adw finder NewWindowTargetPath file:///System/Library/CoreServices/Finder.app/Contents/Resources/MyLibraries/myDocuments.cannedSearch
}

function accpl.caff() {
  errcho "Control-c to cancel"
  accpl.__verbose_run caffeinate "$@"
}

function accpl.os() {
  accpl.__verbose_run sudo opensnoop "$@"
}

function accpl.gifify() {
  # Based on: https://gist.github.com/SlexAxton/4989674
  #   https://gist.github.com/SlexAxton/4989674#comment-1199058
  local FFMPEG CONVERT GIFSICLE output_file maxsize tmp_prefix="/tmp/gifify-tmp-$$"

  [[ -z "$1" ]]   && die "$(tput setaf 1)No input file given. Example: gifify example.mov [max width (pixels)]$(tput sgr 0)" 1
  [[ ! -f "$1" ]] && die "$(tput setaf 1)Input file: $1 does NOT exist!$(tput sgr 0)" 1

  FFMPEG="$(  command -v ffmpeg || command -v avconf)"  || { die "ffmpeg not found!"    1; }
  CONVERT="$( command -v convert)"                      || { die "convert not found!"   1; }
  GIFSICLE="$(command -v gifsicle)"                     || { die "gifsicle not found!"  1; }

  output_file="${1%.*}.gif"
  [[ -f "$output_file" ]] && die "$output_file already exists!" 1
  [[ ! -z "$2" ]] && maxsize="-vf scale=$2:-1" || maxsize=""

  errcho "$(tput setaf 2)Creating \"$output_file\"...$(tput sgr 0)"
  "$FFMPEG" -loglevel panic -i "$1" $maxsize -r 10 -vcodec png "${tmp_prefix}-%05d.png"
  "$CONVERT" +dither -layers Optimize "${tmp_prefix}"-*.png GIF:- | "$GIFSICLE" --no-warnings --colors 256 --delay=10 --loop --optimize=3 --multifile - > "$output_file"
  rm "${tmp_prefix}"-*.png
  errcho "$(tput setaf 2)Done: $output_file$(tput sgr 0)"
}

function accpl.sl() {
  accpl.__verbose_run mdfind -name "$@"
}

function accpl.tellit() {
  # Bind: cmd-ctrl-m to: playpause
  #       cmd-ctrl-n to: next track
  #       cmd-ctrl-b to: previous track
  # in, for example, BetterTouchTool

  case "$1" in
    playpause|'next track'|'previous track')
      QUIET=true accpl.__tell "iTunes" "$1"
      ;;
  esac
}

function accpl.togg_app() {
  # Based on:
  # http://brettterpstra.com/2011/01/22/quick-tip-applescript-application-toggle/
  # http://z12t.com/osx_global_onenote_hotkey/
  # http://apple.stackexchange.com/questions/191845/open-application-in-specific-space-through-applescript

  # Use with a utility like BetterTouchTools to map global hotkeys
  # May want to set: Options > All Desktops, from Dock icon context menu.
  local appName="$1" # Use name of app as it is in /Applications without the .app extension

  osascript -e "
set appName to \"$appName\"
set startIt to false

tell application \"System Events\"
  if not (exists process appName) then
    set startIt to true
  else if visible of process appName then
    if frontmost of process appName then
      set visible of process appName to false
    else
      set frontmost of process appName to true
    end if
  else
    -- may be redundant
    set visible of process appName to true
    set frontmost of process appName to true
  end if
end tell

if startIt then
  display notification appName with title \"Starting:\"

  tell application appName
    activate
    set frontmost to true
    set visible to true
  end tell
end if"
}

function accpl.pl() {
  for i in "$@"; do
    accpl.__verbose_run plutil -convert xml1 -o - "$i"
  done
}

function accpl.ql() {
  # http://www.makeuseof.com/tag/several-ways-to-look-beyond-quick-look-mac/
  # Finder: spacebar or cmd-y
  #   slideshow: cmd+option+y (note that there's an "Index Sheet" button)
  #   zoom in/out: option/option-shift click
  #   plugins: http://www.qlplugins.com/
  #     brew cask install qlcolorcode qlstephen qlmarkdown quicklook-json quicklook-csv betterzipql
  qlmanage -p "$@"
}

function accpl.bcmd() {
  accpl.__brew commands
}

function accpl.buu() {
  accpl.__brew update --verbose
  accpl.__brew cask update --verbose
  accpl.__brew upgrade --all
  accpl.__brew cleanup -n -s # Dry-run
}

# Inspiredb by: http://zanshin.net/2014/02/03/how-to-list-brew-dependencies/
function accpl.bdeps() {
  local formula

  while read -r formula; do
    # shellcheck disable=SC2154
    echo "${yellow}${formula}:${magenta} $(brew deps "$formula") ${reset_colors}"
  done <<< "$({ [[ $# -ne 0 ]] && echo "$@" | tr ' ' '\n'; } || brew list)"
}

function accpl.buses() {
  local formula

  while read -r formula; do
    # shellcheck disable=SC2154
    echo "${yellow}${formula}:${magenta} $(brew uses --installed "$formula") ${reset_colors}"
  done <<< "$({ [[ $# -ne 0 ]] && echo "$@" | tr ' ' '\n'; } || brew list)"
}

function accpl.sphp() {
  die "Switch php (sphp) moved to accomplice" 127
}

function accpl.penmod() {
  local mod target ini

  for mod in "$@"; do
    for ini in /etc/homebrew/etc/php/*/conf.d/ext-${mod}.ini; do
      target="${ini/\/etc\/homebrew/$brew_prefix}"

      if [[ ! -e "$target" ]]; then
        ln -svf "$ini" "$target"
      elif [[ "$(readlink "$target")" =~ ^/etc/homebrew/etc/php/ ]]; then
        errcho "$target is already symlink-ed. Skipping."
      else
        errcho "$target is already symlink-ed elsewhere. Skipping"
      fi
    done
  done

  accpl.ra
}

function accpl.pdismod() {
  local mod target ini

  for mod in "$@"; do
    for ini in $brew_prefix/etc/php/*/conf.d/ext-${mod}.ini; do
      target="$(readlink "$ini")"

      if [[ -z "$target" ]]; then
        errcho "$ini is not a symlink. Skipping."
      elif [[ "$target" =~ ^/etc/homebrew/etc/php/ ]]; then
        errcho rm -f "$ini"
        rm -f "$ini"
      else
        errcho "$ini is symlink-ed elsewhere. Skipping"
      fi
    done
  done

  accpl.ra
}

function accpl.cgu() {
  accpl.__verbose_run composer global update
}

function accpl.hda() {
  accpl.__hdiutil attach "$1"
}
function accpl.hdc() {
  accpl.__hdiutil compact "$1"
}
function accpl.hdcr() {
  accpl.__hdiutil create "$1" -encryption AES-128 -size "$2" -volname "$3" -fs JHFS+
}
function accpl.hdd() {
  accpl.__hdiutil detach "$1"
}
function accpl.hdr() {
  accpl.__hdiutil resize "$1" "$2"
}

function accpl.vv() {
  accpl.__verbose_run diskutil  verifyvolume "$1"
}

# "main()" if not "source"-d
#   declare -F, for function names
#   declare -f, for function definitions
if [[ "${BASH_SOURCE[0]}" = "${0}" ]]; then
  # Allow for function names to be sym- or hard-linked to this script
  { type -t "accpl.${accpl_self}" > /dev/null && subcommand="$accpl_self"; } || {
    subcommand="$1"
    shift
  }

  case $subcommand in
    "" | "-h" | "--help")
      accpl.help
      ;;
    *)
      "accpl.${subcommand}" "$@"
      if [[ $? -eq 127 ]]; then
        cat <<EOT >&2
Error: '$subcommand' is not a known subcommand.
EOT
        exit $?
      fi
      ;;
  esac
fi
