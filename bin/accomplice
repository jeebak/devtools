#!/usr/bin/env bash

# https://gist.github.com/waylan/4080362
# drush sql-create --db-su=root --db-su-pw=root  ${PWD##/*/} | sed 's/-//g')

brew_prefix="$(brew --prefix)"

# Echo to strerr
function errcho() {
  # echo to strerr
  >&2 echo "$@"
}

# Die with message to stderr and exit code
function die() {
  errcho "$1"
  exit "$2"
}

# Quiet it all
function qt() {
  "$@" > /dev/null 2>&1
}

# Quiet only errors
function qte() {
  "$@" 2> /dev/null
}

accpl_self="${0##/*/}"
destdir="$(grep -E -o '[^/]+/[^/]*$' <<< "${0%/bin/$accpl_self}")"
confdir="${XDG_CONFIG_HOME:-$HOME/.config}/$destdir"

function accpl.help() {
  cat <<EOT
Usage: $accpl_self <subcommand> [options]

  System Helper Subcommands:
    ra        Restart Apache
    rm        Restart MariaDB/MySQL
    rp        Restart PHP-FPM
    sphp      Switch php versions: $accpl_self sphp [phpversion, like: 5.6, 7.1]

  MySQL Helper Subcommands:
    c         Create DB based on drupal/joomla/wp creds, or \$PWD
    drop      DROP DB and *USER* based on drupal/joomla/wp creds, or \$PWD
    p         Change DB password based on drupal/joomla/wp creds, or \$PWD
    l         MySQL Shell  Login based on drupal/joomla/wp creds, or \$PWD
    q         MySQL Query: $accpl_self q [\$query] [\$database] [\$user] [\$passwd]
    t         SHOW TABLES based on drupal/joomla/wp creds, or \$PWD
    trunc     TRUNCATE TABLE \$2 in db based on drupal/joomla/wp creds, or \$PWD
    d         SHOW DATABASES;
    f         FLUSH PRIVILEGES;

  CMS (Drupal/Joomla/WordPress) Helper Subcommands: (\$dr == \$drupal_root)
    dump      Drush/wp cache clear, then: sql dump to db/ folder
    seed      Drush/wp db drop, then seed db via: sql cli with \$2
    addme     Drush/wp user-create, and user-add-role (administrator / programmer)
                as appropriate
    ccc       Compass clean, compile, then drush/wp cache clear
    cw        Compass watch, for drupal/wp

  Drupal Only: (\$dr == \$drupal_root)
    si        Drush site-install standard based on \$PWD
    dls       Add drupal *local* settings.php file (if it exists) based on \$dr
    els       Edit drupal *local* settings.php file (if it exists) based on \$dr
                falling back to: \$dr/sites/default/settings.php
    exfe      Extract Drupal Features .tar file to: \$dr/sites/all/modules/features
                falling back to: \$dr/sites/all/modules/custom
                then finally to: \$dr/sites/all/modules before failing
    dinit     Drupal init (for newly clone-d MT drupal project.) Will run:
                $accpl_self {dls,c},
                cap \$stage files:pull, $accpl_self fp,
                cap \$stage db:down, $accpl_self seed db/default_\${stage}.sql
              \$stage defaulting to 'prod' unless provided as a parameter

  *** Requires a clone at: \$HOME/.ghq/git.drupal.org/project/drupal ***
    cd        Core Diff (useful to examine inherited legacy projects)
    cus       List custom files (outside of core and contrib)

  Apache Helper Subcommands:
    adb       Simple Apache debug output (requires sudo)
    aa        Examine Apache access logs via: lnav, if available, tail -f, otherwise
    ae        Examine Apache  error logs via: lnav, if available, tail -f, otherwise
    fp        Fix Permissions for concrete5/drupal/joomla/wp content dirs
                - OR - as provided as parameters
    genssl    Generate Self-signed SSL Certs (server.{crt,csr,key}, or specify name)

  Misc. Helper Subcommands:
    ssh       Ssh's to ssh_options[:user]@#{gateway} from Capfile, based on current
              git branch

    exam      Examine archive files (list contents, good idea to run 1st, before...)
    ex        Extract archive files (NOTE: contents may not all be contained in a
                folder and may litter your \$PWD)

EOT
}

function accpl.__call_apachectl() {
  # apachectl -t -D DUMP_VHOSTS
  local APACHECTL

  APACHECTL="$(command -v apachectl)"
  if [[ -z "$APACHECTL" ]]; then
    APACHECTL="$(command -v apache2ctl)"
  fi

  [[ -z "$APACHECTL" ]] && die "ApacheCtl not found!" 127

  accpl.__verbose_run sudo "$APACHECTL" "$@"
}

function accpl.__call_drush() {
  local DRUSH drupal_root

  DRUSH="$(command -v drush)"
  [[ -z "$DRUSH" ]] && die "Drush not found!" 127

  drupal_root="$(accpl.__get_drupal_root)"
  "$DRUSH" -r "$drupal_root" "$@"
}

function accpl.__call_joomla() {
  local JOOMLA joomla_root

  JOOMLA="$(command -v joomla)"
  [[ -z "$JOOMLA" ]] && die "Joomla-console not found!" 127

  joomla_root="$(accpl.__get_joomla_root)"
  "$JOOMLA" --www="$joomla_root" "$@"
}

function accpl.__call_wp_cli() {
  local WPCLI wordpress_root

  WPCLI="$(command -v wp)"
  [[ -z "$WPCLI" ]] && die "Wp-cli not found!" 127

  wordpress_root="$(accpl.__get_wordpress_root)"
  "$WPCLI" --path="$wordpress_root" "$@"
}

function accpl.__get_clean_mysql_db() {
  local git_root project_name

  git_root="$(accpl.__get_git_root)"
  project_name="${git_root##/*/}"

  [[ -z "$project_name" ]] && project_name="${PWD##/*/}"
  project_name="${project_name//[^a-zA-Z0-9]/}"

  # MySQL usernames have 16 character limit
  echo "${project_name:0:16}"
}

function accpl.__get_mysql_creds() {
  local dbname dbpassword dbusername clean_mysql_db

  if accpl.__is_concrete5; then
    read -r dbname dbpassword dbusername <<< "$(accpl.__get_concrete5_creds)"
  elif accpl.__is_drupal; then
    read -r dbname dbpassword dbusername <<< "$(accpl.__get_drupal_creds)"
  elif accpl.__is_joomla; then
    read -r dbname dbpassword dbusername <<< "$(accpl.__get_joomla_creds)"
  elif accpl.__is_wordpress; then
    read -r dbname dbpassword dbusername <<< "$(accpl.__get_wordpress_creds)"
  fi

  if [[ $# -ne 3 ]]; then
    clean_mysql_db="$(accpl.__get_clean_mysql_db)"
  fi

  dbname="${dbname:-$clean_mysql_db}"
  dbpassword="${dbpassword:-$clean_mysql_db}"
  dbusername="${dbusername:-$clean_mysql_db}"

  echo "$dbname" "$dbpassword" "$dbusername"
}

function accpl.__get_cred() {
  local destfile destdir userprompt cred

  destfile="$1"
  destdir="${destfile%/*}"

  userprompt="$2"

  [[ ! -d "$destdir" ]] && mkdir -p "$destdir" && chmod 700 "$destdir"

  if [[ -r "$destfile" ]]; then
    cred="$(cat "$destfile")"
  else
    [[ ! -z "$3" ]] && stty -echo
    read -r -p "$userprompt " cred
    [[ ! -z "$3" ]] && stty echo
    echo "$cred" > "$destfile" && chmod 600 "$destfile"
  fi

  echo "$cred"
}

function accpl.__get_mysql_root_passwd() {
  accpl.__get_cred "$confdir/creds/mysql/root-passwd.txt" "MySQL root password:" noecho
}

function accpl.__get_my_drupal_username() {
  accpl.__get_cred "$confdir/creds/drupal/username.txt" "Your default Drupal username:"
}

function accpl.__get_my_drupal_email_address() {
  accpl.__get_cred "$confdir/creds/drupal/email.txt" "Your default Drupal email:"
}

function accpl.__get_my_drupal_passwd() {
  accpl.__get_cred "$confdir/creds/drupal/passwd.txt" "Your default Drupal password:" noecho
}

function accpl.__get_my_wordpress_username() {
  accpl.__get_cred "$confdir/creds/wordpress/username.txt" "Your default Wordpress username:"
}

function accpl.__get_my_wordpress_email_address() {
  accpl.__get_cred "$confdir/creds/wordpress/email.txt" "Your default WordPress email:"
}

function accpl.__get_my_wordpress_passwd() {
  accpl.__get_cred "$confdir/creds/wordpress/passwd.txt" "Your default WordPress password:" noecho
}

function accpl.__db_query() {
  local clean_mysql_db query db user passwd

  clean_mysql_db="$(accpl.__get_clean_mysql_db)"
  # Params: Run this query, on this database, using this username, and this password
  # Empty query, gets mysql shell
  query="${1/\{_DB_SELF_\}/$clean_mysql_db}"
  db="${2:-$clean_mysql_db}"
  user="${3:-$clean_mysql_db}"
  passwd="${4:-$clean_mysql_db}"

  if accpl.__is_drupal && [[ $# -lt 2 ]]; then
    if [[ -z "$query" ]]; then
      accpl.__call_drush sql-cli
    else
      accpl.__call_drush sql-query "$query"
    fi
  elif accpl.__is_wordpress && [[ $# -lt 2 ]]; then
    if [[ -z "$query" ]]; then
      accpl.__call_wp_cli db cli
    else
      accpl.__call_wp_cli db query "$query"
    fi
  else
    [[ "$user" = root ]] && passwd="$(accpl.__get_mysql_root_passwd)"
    [[ -z "$passwd" ]] && opt="" || opt="-p"

    if [[ -z "$query" ]]; then
      mysql $opt"$passwd" -u "$user" "$db"
    else
      mysql $opt"$passwd" -u "$user" "$db" <<< "$query"
    fi
  fi
}

function accpl.__reload_plist() {
  local plist="$1"
  local _sudo=''

  if [[ "$plist" =~ ^/Library/ ]] || [[ "$plist" =~ ^/System/Library/ ]]; then
    _sudo='sudo'
  fi

  if [[ -f "$plist" ]]; then
    # man launchctl: -w Overrides the Disabled key and sets it to false or true
    accpl.__verbose_run $_sudo launchctl unload -w "$plist"
    accpl.__verbose_run $_sudo launchctl load   -w "$plist"
  else
    errcho "$plist NOT FOUND!"
  fi
}

function accpl.__run_compass() {
  local BUNDLE COMPASS git_root sassdir sassdir_relative

  BUNDLE="$(command -v bundle)"
  COMPASS="$(command -v compass)"

  [[ -z "$BUNDLE" ]]  && die "Bundler not found!" 127
  [[ -z "$COMPASS" ]] && die "Compass not found!" 127

  git_root="$(accpl.__get_git_root)"
  sassdir="$(accpl.__get_sassdir)"
  errcho "Found: $sassdir"
  cd "$sassdir" || exit

  sassdir_relative="$(sed "s;$git_root/;;" <<< "$sassdir")"

  if accpl.__git_ls_grep "$sassdir_relative/Gemfile"; then
    if ! "$BUNDLE" list | qt grep ' compass '; then
      "$BUNDLE" install
    fi
    COMPASS="$BUNDLE exec compass"
  fi

  $COMPASS "$@"
}

function accpl.__verbose_run() {
  errcho "Running: $*"
  "$@"
}

function accpl.run_query() {
  local query="$1"

  if accpl.__db_query "$@"; then
    errcho "SUCCESS: '$query'"
  else
    die "FAIL: '$query'" 1
  fi
}

function accpl.__is_mac() {
  [[ $OSTYPE == darwin* ]]
}

function accpl.__is_linux() {
  [[ $OSTYPE == linux-gnu ]]
}

function accpl.__is_git_repo() {
  [[ -d .git ]] || qt git rev-parse --git-dir
}

function accpl.__is_d8() {
  local drupal_root

  drupal_root="$(accpl.__get_drupal_root)"
  [[ -d "$drupal_root/core" ]]
}

function accpl.__is_concrete5() {
  if accpl.__is_git_repo; then
    qt accpl.__git_ls_grep concrete/config/app.php
  else
    return 1
  fi
}

function accpl.__is_drupal() {
  if accpl.__is_git_repo; then
    qt accpl.__git_ls_grep modules/taxonomy/taxonomy.module
  else
    return 1
  fi
}

function accpl.__is_joomla() {
  if accpl.__is_git_repo; then
    qt accpl.__git_ls_grep libraries/joomla/
  else
    return 1
  fi
}

function accpl.__is_laravel() {
  if accpl.__is_git_repo; then
    qt accpl.__git_ls_grep 'artisan$'
  else
    return 1
  fi
}

function accpl.__is_symfony() {
  if accpl.__is_git_repo; then
    qt accpl.__git_ls_grep app/SymfonyRequirements.php
  else
    return 1
  fi
}

function accpl.__is_wordpress() {
  if accpl.__is_git_repo; then
    qt accpl.__git_ls_grep wp-admin/index.php
  else
    return 1
  fi
}

function accpl.__git_ls_grep() {
  git ls-tree -r "$(accpl.__get_git_current_branch)" --name-only --full-tree | grep "$1"
}

function accpl.__get_git_current_branch() {
  local git_head git_root

  if accpl.__is_git_repo; then
    git_root="$(accpl.__get_git_root)"
    git_head="$(qte git symbolic-ref HEAD)" || git_head="$([[ -f $git_root/.git/HEAD ]] && cat "$git_root/.git/HEAD")"
  fi

  echo "${git_head##refs/heads/}"
}

function accpl.__get_git_root() {
  qte git rev-parse --show-toplevel
}

function accpl.__get_concrete5_creds() {
  local concrete5_root creds

  concrete5_root="$(accpl.__get_concrete5_root)"
  # Pipe to sort, to ensure: DB_DATABASE DB_PASSWORD DB_USERNAME order.
  # Concrete 5.6:
  if [[ -f "$concrete5_root/config/site.php" ]]; then
    creds=( "$(grep -E 'DB_(DATABASE|PASSWORD|USERNAME)' "$concrete5_root/config/site.php" | sort | cut -d \' -f 4)" )
  # Concrete 5.7:
  elif [[ -f "$concrete5_root/application/config/database.php" ]]; then
    creds=( "$(php -r "\$f=require('$concrete5_root/application/config/database.php'); \$f=\$f['connections']['concrete']; print(\$f['database'].' '.\$f['password'].' '.\$f['username']);")" )
  fi

  echo "${creds[@]}"
}

function accpl.__get_concrete5_root() {
  local git_root is_concrete5 concrete5_root

  git_root="$(accpl.__get_git_root)"
  if [[ ! -z "$git_root" ]]; then
    # concrete5 6, 7, and 8, all seems to have this path to this file:
    is_concrete5="$(accpl.__git_ls_grep concrete/config/app.php)"
    if [[ ! -z "$is_concrete5" ]]; then
      # Strip away: concrete/config/app.php and we'll have our: concrete5_root
      concrete5_root="${is_concrete5/\/concrete\/config\/app.php/}"
    fi
  fi

  echo "$git_root/$concrete5_root"
}

function accpl.__get_drupal_creds() {
  local drupal_root settings_file creds

  drupal_root="$(accpl.__get_drupal_root)"
  # Pipe to sort, to ensure: db-name, db-password, db-username order, which
  # isn't guaranteed by drush param order
  # local drush_status="$(accpl.__call_drush status --format=yaml --show-passwords db-name db-password db-username | sort)"
  # set -- $(echo "$drush_status" | sed 's/^ *db-[^:][^:]*: //')
  # Drush will fail, if db does not exist
  if [[ -f "$drupal_root/sites/default/local_settings.php" ]]; then
    settings_file="$drupal_root/sites/default/local_settings.php"
  elif [[ -f "$drupal_root/sites/default/settings.local.php" ]]; then
    settings_file="$drupal_root/sites/default/settings.local.php"
  elif [[ -f "$drupal_root/sites/default/settings.php" ]]; then
    settings_file="$drupal_root/sites/default/settings.php"
  fi

  [[ -n "$settings_file" ]] && creds=( "$(php -r "require('$settings_file');\$d=\$databases['default']['default'];print \$d['database'].' '.\$d['password'].' '.\$d['username'];")" )

  echo "${creds[@]}"
}

function accpl.__get_drupal_root() {
  local git_root is_drupal drupal_root

  git_root="$(accpl.__get_git_root)"
  if [[ ! -z "$git_root" ]]; then
    # Drupal 6, 7, and 8, all seems to have this path to this file:
    is_drupal="$(accpl.__git_ls_grep modules/taxonomy/taxonomy.module)"
    if [[ ! -z "$is_drupal" ]]; then
      # Strip away: modules/taxonomy/taxonomy.module and we'll have our: drupal_root
      # Drupal 8 path is (currently) prefixed: with core/ ... but, of course, it will
      # still fail if your version of drush doesn't support Drupal 8.
      drupal_root="$(sed 's;core[/]*$;;' <<< "${is_drupal/modules\/taxonomy\/taxonomy.module/}")"
      # Set additional option(s) to pass along to drush...
    fi
  fi

  echo "$git_root/$drupal_root"
}

function accpl.__get_joomla_creds() {
  local joomla_root creds

  joomla_root="$(accpl.__get_joomla_root)"
  # db password user
  if [[ -f "$joomla_root/configuration.php" ]]; then
    creds=( "$(php -r "require('$joomla_root/configuration.php'); \$t = new JConfig; print \$t->db.' '.\$t->password.' '.\$t->user;")" );
  fi

  echo "${creds[@]}"
}

function accpl.__get_joomla_root() {
  local git_root is_joomla joomla_root

  git_root="$(accpl.__get_git_root)"
  if [[ ! -z "$git_root" ]]; then
    # joomla versions all seems to have this path to this folder:
    is_joomla="$(accpl.__git_ls_grep libraries/joomla/ | head -1 | sed 's;/.*$;;')"
    if [[ ! -z "$is_joomla" ]]; then
      # Strip away: libraries/joomla and we'll have our: joomla_root
      joomla_root="${is_joomla/libraries\/joomla/}"
    fi
  fi

  echo "$git_root/$joomla_root"
}

function accpl.__get_laravel_root() {
  local git_root is_laravel laravel_root

  git_root="$(accpl.__get_git_root)"
  if [[ ! -z "$git_root" ]]; then
    # Look for artisan in repo
    is_laravel="$(accpl.__git_ls_grep 'artisan$')"
    if [[ ! -z "$is_laravel" ]]; then
      # Strip away: artisan and we'll have our: laravel_root
      laravel_root="${is_laravel/artisan/}"
    fi
  fi

  echo "$git_root/$laravel_root"
}

function accpl.__get_symfony_root() {
  local git_root is_symfony symfony_root

  git_root="$(accpl.__get_git_root)"
  if [[ ! -z "$git_root" ]]; then
    # Symfony seems to have this path to this file:
    is_symfony="$(accpl.__git_ls_grep app/SymfonyRequirements.php)"
    if [[ ! -z "$is_symfony" ]]; then
      # Strip away: app/SymfonyRequirements.php and we'll have our: symfony_root
      symfony_root="${is_symfony/app\/SymfonyRequirements.php/}"
    fi
  fi

  echo "$git_root/$symfony_root"
}

function accpl.__get_wordpress_creds() {
  local wp_root creds

  wp_root="$(accpl.__get_wordpress_root)"
  # DB_NAME DB_PASSWORD DB_USER
  # This will fail if DB doesn't exist, as when we're invoking accpl.c :/
  # set $(php -r "require('$wp_root/wp-config.php'); print DB_NAME.' '.DB_PASSWORD.' '.DB_USER;");
  # Pipe to sort, to ensure: DB_NAME, DB_PASSWORD, DB_USER order.
  if [[ -f "$wp_root/local-config.php" ]]; then
    creds=( "$(grep -E 'DB_(NAME|USER|PASSWORD)' "$wp_root/local-config.php" | sort | cut -d \' -f 4)" )
  elif [[ -f "$wp_root/wp-config.php" ]]; then
    creds=( "$(grep -E 'DB_(NAME|USER|PASSWORD)' "$wp_root/wp-config.php"    | sort | cut -d \' -f 4)" )
  fi

  # This will fail if any of the results has whitespace
  if [[ $# -ne 3 ]]; then
    set --
  fi

  echo "${creds[@]}"
}

function accpl.__get_wordpress_root() {
  local git_root is_wordpress wordpress_root

  git_root="$(accpl.__get_git_root)"
  if [[ ! -z "$git_root" ]]; then
    # wordpress 6, 7, and 8, all seems to have this path to this file:
    is_wordpress="$(accpl.__git_ls_grep wp-admin/index.php)"
    if [[ ! -z "$is_wordpress" ]]; then
      # Strip away: wp-admin/index.php and we'll have our: wordpress_root
      wordpress_root="${is_wordpress/wp-admin\/index.php/}"
    fi
  fi

  echo "$git_root/$wordpress_root"
}

function accpl.__get_sassdir() {
  local git_root theme sassdir

  git_root="$(accpl.__get_git_root)"
  # Drush seems to emit a ^M char, and a trailing space re: tr, and last sed expression
  if accpl.__is_drupal; then
    if accpl.__is_d8; then
      theme="$(accpl.__call_drush config-get system.theme | grep default: | sed 's/default: //')"
    else
      theme="$(accpl.__call_drush vget theme_default | sed "s/theme_default: //;s/'//g")"
      if [[ -z "$theme" ]]; then
        theme="$(accpl.__call_drush status theme | tr -d $'\r' | grep 'Default theme' | sed 's/^[^:]*:  *//;s/ //g')"
      fi
    fi
    sassdir="$(accpl.__git_ls_grep "$theme/config.rb")"
  elif accpl.__is_wordpress; then
    theme="$(accpl.__call_wp_cli theme status | tail -n +2 | sed 's/^ *//;s/  */:/g' | grep '^A:' | cut -d: -f2)"
    sassdir="$(accpl.__git_ls_grep config.rb | grep "$theme")"
  # TODO: elif accpl.__is_joomla; then
  fi

  [[ -z "$sassdir" ]] && die "No config.rb file found!" 1

  echo "$git_root/${sassdir%/*}"
}

# System Helper Subcommands:

function accpl.ra() {
  local httpd_path apachectl_path

  # Preferentially use system apache since slipstream uses it (not trusting user $PATH)
  httpd_path="$(    qte command ls /usr/sbin/httpd     || qte command ls "$brew_prefix/opt/httpd/bin/httpd")"
  apachectl_path="$(qte command ls /usr/sbin/apachectl || qte command ls "$brew_prefix/bin/apachectl"      )"

  if [[ -z "$httpd_path" ]] || [[ -z "$apachectl_path" ]]; then
    die "Y U NO have httpd or apachectl?!" 127
  fi

  errcho "Restarting Apache..."
  qt pgrep -f "/usr/sbin/httpd" && accpl.__verbose_run sudo pkill -9 -f "/usr/sbin/httpd"
  qt pgrep -f "$httpd_path"     && accpl.__verbose_run sudo pkill -9 -f "$httpd_path"

  accpl.__verbose_run sudo "$apachectl_path" -k start

  errcho "PID(s):"
  pgrep -f "$httpd_path"

  accpl.rp
}

function accpl.rm() {
  local db

  if accpl.__is_linux; then
    errcho "Restarting mysql..."
    mysql.server stop
    (qt mysql.server start &)
    return
  fi

  for db in mariadb mysql; do
    if [[ -f "$HOME/Library/LaunchAgents/homebrew.mxcl.${db}.plist" ]]; then
      accpl.__reload_plist "$HOME/Library/LaunchAgents/homebrew.mxcl.${db}.plist"
    fi
  done
}

function accpl.rp() {
  local service stopped version

  if accpl.__is_linux; then
    errcho "Restarting php-fpm..."
    qte killall php-fpm
    ("$brew_prefix/sbin/php-fpm" &)
    return
  fi

  while read -r -u3 service && [[ ! -z "$service" ]]; do
    stopped="$service"
    brew services stop "$stopped"
  done 3< <(brew services list | grep -E '^php[@]*[57]*' | grep ' started ' | cut -f1 -d' ')

  version="${1:-$stopped}"
  version="${version:-56}"

  accpl.__verbose_run brew services start "${version}"
  accpl.__verbose_run brew services list
}

function accpl.sphp() {
  # https://raw.githubusercontent.com/conradkleinespel/sphp-osx/master/sphp
  # https://coderwall.com/p/nm_wna
  local currentversion newversion shortOld shortNew
  local currentBrewVersion currentBrewPhpVersion validVersions GSORT

  GSORT="$(command -v gsort || { sort --version | qt grep -o 'GNU coreutils' && command -v sort; })"
  if [[ -z "$GSORT" ]]; then
    die "Y U NO have GNU sort?!" 1
  fi

  # https://brew.sh/2018/01/19/homebrew-1.5.0/
  currentBrewVersion="$(brew --version | grep -E -o ' [0-9]+\.[0-9]+')"

  # If slipstream.bash was used to setup, coreutils (which contains gsort) will be available
  if [[ "$(echo -e "$currentBrewVersion\\n 1.4" | "$GSORT" -V -r | head -1)" = ' 1.4' ]]; then
    errcho "In brew version 1.5 (http://bit.ly/2q9wcoI / http://bit.ly/2qcXiem) the php tap has been archived."
    die "This script will no longer support the older version" 1
  fi

  currentBrewPhpVersion="$([[ -d "$brew_prefix/Cellar/php" ]] && basename "$(realpath "$brew_prefix/opt/php")" | grep -E -o '[0-9]+\.[0-9]+')"
  validVersions="$(find "$brew_prefix/opt/"php@* -type l -exec basename {} \; | grep -E -o '[0-9]+\.[0-9]+' | tr '\n' '|')"

  if [ $# -ne 1 ]; then
    die "Usage: $accpl_self sphp [${validVersions}sys]" 1
  fi

  if [[ "$1" = 'sys' ]];then
    errcho "Linking system libphp5..."
    accpl.__verbose_run ln -svf /usr/libexec/apache2/libphp5.so "$brew_prefix/lib/libphp5.so"

    errcho "Restarting Apache..."
    accpl.ra

    return
  fi

  currentversion="$(php -r "echo substr(phpversion(), 0, 3);")"
  newversion="$1"

  # shellcheck disable=SC2034
  shortOld="$(php -r "echo substr(phpversion(), 0, 1);")"
  shortNew="$(php -r "echo substr('$1', 0, 1);")"

  if qt accpl.__verbose_run brew list "php@${newversion}"; then
    errcho "PHP version $newversion found"

    errcho "Unlinking old binaries for ${currentversion} ..."
    accpl.__verbose_run brew unlink "php@${currentversion}"

    errcho "Linking new binaries for ${newversion} ..."
    qt accpl.__verbose_run brew unlink "php@${newversion}"
    accpl.__verbose_run brew link --overwrite --force "php@${newversion}"

    if accpl.__is_linux || accpl.__verbose_run brew services list | qt grep -E '^php[@]*[57]*'; then
      if [[ "$newversion" = "$currentBrewPhpVersion" ]]; then
        accpl.rp "php"
      else
        accpl.rp "php@${newversion}"
      fi
    else
      errcho "Linking new modphp addon..."
      accpl.__verbose_run ln -svf "$brew_prefix/opt/php${newversion}/libexec/apache2/libphp${shortNew}.so" "$brew_prefix/lib/libphp${shortNew}.so"

      errcho "Fixing LoadModule..."
      [[ ! -d "$brew_prefix/var/run/apache2" ]] && mkdir -p "$brew_prefix/var/run/apache2"
      accpl.__verbose_run ln -svf "/etc/homebrew/etc/apache2/php${shortNew}.conf" "$brew_prefix/var/run/apache2/php.conf"
    fi

    errcho "Restarting Apache..."
    accpl.ra

    errcho "Done."
  else
    die "PHP version $newversion was not found." 1
  fi
}

# MySQL Helper Subcommands:

function accpl.c() {
  local dbname dbpassword dbusername

  read -r dbname dbpassword dbusername <<< "$(accpl.__get_mysql_creds)"

  if accpl.__db_query "CREATE DATABASE IF NOT EXISTS $dbname COLLATE 'utf8_general_ci'" mysql root; then
    accpl.__db_query "GRANT ALL PRIVILEGES ON $dbname.* TO '$dbusername'@'localhost' IDENTIFIED BY '$dbpassword'" mysql root
  else
    die "Creation of: '$dbname' FAILED" 1
  fi

  errcho "Created: '$dbname' successfully"
}

function accpl.drop() {
  local dbname dbpassword dbusername

  read -r dbname dbpassword dbusername <<< "$(accpl.__get_mysql_creds)"

  if accpl.__db_query "DROP DATABASE $dbname" mysql root; then
    accpl.__db_query "DROP USER '$dbusername'@'localhost'" mysql root
  else
    die "Destruction of: '$dbname' FAILED" 1
  fi

  errcho "Destroyed: '$dbname' successfully"
}

function accpl.p() {
  local dbname dbpassword dbusername new_mysql_passwd

  read -r dbname dbpassword dbusername <<< "$(accpl.__get_mysql_creds)"

  if [[ "$(accpl.__db_query "SELECT COUNT(*) FROM mysql.user WHERE User='$dbusername'" mysql root | tail -1)" = "1" ]]; then
    stty -echo
    read -r -p "New MySQL password for '$dbusername': " new_mysql_passwd
    stty echo
    echo

    if accpl.__db_query "SET PASSWORD FOR '$dbusername'@'localhost' = PASSWORD('$new_mysql_passwd')" mysql root; then
      errcho "Password change for: '$dbusername' successful"
    fi
  else
    die "User: '$dbusername' does not seem to exist" 1
  fi
}

function accpl.l() {
  # Empty query, gets mysql shell
  accpl.q "$@"
}

function accpl.q() {
  accpl.__db_query "$@"
}

function accpl.t() {
  accpl.run_query "SHOW TABLES"
}

function accpl.trunc() {
  [[ -z "$1" ]] && die "Give me a table to truncate!" 1
  accpl.run_query "TRUNCATE TABLE $1"
}

function accpl.d() {
  accpl.run_query "SHOW DATABASES" mysql root
}

function accpl.f() {
  accpl.run_query "FLUSH PRIVILEGES" mysql root
}

# Drupal Only: (\$dr == \$drupal_root)

function accpl.si() {
  local clean_mysql_db drush_output drupal_root

  # [[ -d .git ]] && die "This is already a git repo!" 1
  [[ -d drupal ]] || [[ -f drupal ]] && die "Drupal folder or file already exists!" 1

  clean_mysql_db="$(accpl.__get_clean_mysql_db)"
  accpl.c

  drush_output="$(accpl.__call_drush dl drupal 2>&1)"
  errcho "$drush_output"
  drush_output="$(echo "$drush_output" | grep 'downloaded to ' | sed -e 's;^[^/]*;;' -e 's/\. .*$//')"

  drupal_root="${drush_output%/*}/drupal"

  mv "$drush_output" "$drupal_root"

  mkdir -p "$drupal_root"/sites/all/modules/{contrib,custom,features} "$drupal_root"/sites/all/libraries

  accpl.__call_drush \
    site-install standard   \
      --account-name=admin  \
      --account-pass=admin  \
      --db-url="mysql://$clean_mysql_db:$clean_mysql_db@localhost/$clean_mysql_db"

  ln -svf "${drupal_root##/*/}" webroot
  accpl.fp

  # cd ${GIT_PREFIX:-.} && git init . && git add . && git commit -m 'Initial commit'
}

# CMS (Drupal/Joomla/WordPress) Helper Subcommands: (\$dr == \$drupal_root)

function accpl.dump() {
  local now branch_name git_root dest_file_base dbname dbpassword dbusername

  now="$(date '+%Y-%m-%d_%H-%M-%S')"
  branch_name="$(accpl.__get_git_current_branch)"
  git_root="$(accpl.__get_git_root)"

  branch_name="${branch_name/[^-_a-zA-Z0-9]/_}"

  [[ ! -d "$git_root/db" ]] && mkdir -p "$git_root/db"
  dest_file_base="${git_root}/db/default_${branch_name}-${now}"

  if accpl.__is_drupal; then
    if accpl.__is_d8; then
      accpl.__call_drush cache-rebuild
    else
      accpl.__call_drush cache-clear all
    fi

    accpl.__call_drush sql-dump --ordered-dump --gzip > "${dest_file_base}.sql.gz"
  elif accpl.__is_wordpress; then
    accpl.__call_wp_cli cache flush
    accpl.__call_wp_cli db export --add-drop-table --skip-extended-insert "${dest_file_base}.sql"
    errcho "... and gzip-ing"
    gzip "${dest_file_base}.sql"
  else
    read -r dbname dbpassword dbusername <<< "$(accpl.__get_mysql_creds)"
    mysqldump -u"$dbusername" -p"$dbpassword" "$dbname" --skip-extended-insert | gzip - > "${dest_file_base}.sql.gz"
  fi

  errcho
  errcho "Dumped to: ${dest_file_base}.sql.gz"
}

function accpl.seed() {
  local CAT dbname dbpassword dbusername

  [[ -z "$1" ]] || [[ ! -f "$1" ]] && die "$1 NOT valid!" 1

  case "$1" in
    *.7z)   CAT="7z e -so";;
    *.bz2)  CAT="bunzip2 -c";;
    *.gz)   CAT="gunzip -c";;
    *.zip)  CAT="unzip -p";;
    *)      CAT="cat";;
  esac

  errcho "Seeding from: $1"

  if accpl.__is_drupal; then
    accpl.__call_drush sql-drop -y
    $CAT "$1" | accpl.__call_drush sql-cli
  elif accpl.__is_wordpress; then
    accpl.__call_wp_cli db drop --yes
    accpl.__call_wp_cli db create
    $CAT "$1" | accpl.__call_wp_cli db import -
  else
    read -r dbname dbpassword dbusername <<< "$(accpl.__get_mysql_creds)"
    if qt mysqlshow -u"$dbusername" -p"$dbpassword" "$dbname"; then
      accpl.drop
      accpl.c
    fi
    $CAT "$1" | mysql -u"$dbusername" -p"$dbpassword" "$dbname"
  fi
}

function accpl.addme() {
  local CMS i username email password roles results uid

  if accpl.__is_drupal; then
    CMS=drupal
  elif accpl.__is_wordpress; then
    CMS=wordpress
  # TODO: elif accpl.__is_joomla; then
  fi

  username="$(accpl.__get_my_${CMS}_username)"
  email="$(accpl.__get_my_${CMS}_email_address)"
  password="$(accpl.__get_my_${CMS}_passwd)"

  if accpl.__is_drupal; then
    roles="$(accpl.__call_drush role-list --filter='administer nodes' --pipe)"

    results="$(accpl.__call_drush user-create "$username" --mail="$email" --password="$password")"
    uid="$(grep 'User ID' <<< "$results" | sed 's/^[^:]*:[[:space:]]*//;s/[[:space:]]*$//')"

    errcho "$results"
    if [[ ! -z "$uid" ]]; then
      while read -r role; do
        accpl.__call_drush user-add-role "$role" "$uid"
      done <<< "$roles"

      if accpl.__call_drush pm-list --pipe --type=module --status=enabled --no-core | qt grep -E '\bemail_registration\b'; then
        errcho "*************************************************************************************** "
        errcho "***** The 'email_registration' module is enabled. Use your email address to login ***** "
        errcho "*************************************************************************************** "
      fi

      errcho "User Information for User ID: $uid"
      accpl.__call_drush user-information "$uid"
    fi
  elif accpl.__is_wordpress; then
    accpl.__call_wp_cli user create "$username" "$email" --user_pass="$password" --role=administrator
  # TODO: elif accpl.__is_joomla; then
  fi
}

function accpl.ccc() {
  accpl.__run_compass clean
  accpl.__run_compass compile

  if accpl.__is_drupal; then
    if accpl.__is_d8; then
      accpl.__call_drush cr
    else
      accpl.__call_drush cc all
    fi
  elif accpl.__is_wordpress; then
    accpl.__call_wp_cli cache flush
  # TODO: elif accpl.__is_joomla; then
  fi
}

function accpl.cw() {
  accpl.__run_compass watch
}

function accpl.dls() {
  local template clean_mysql_db drupal_root local_settings

  template="${0%/*}/../templates/drupal/local_settings.php"
  clean_mysql_db="$(accpl.__get_clean_mysql_db)"
  drupal_root="$(accpl.__get_drupal_root)"

  accpl.__is_d8 && local_settings="settings.local" || local_settings="local_settings"

  if [[ -d "$drupal_root/sites/default/" ]]; then
    if [[ ! -f "$drupal_root/sites/default/setting.php" ]]; then
      if qt grep "${local_settings}.php" "$drupal_root/sites/default/settings.php"; then
        sed -e "s/__MYSQL_DB__/$clean_mysql_db/g"      \
            -e "s/__MYSQL_USER__/$clean_mysql_db/g"    \
            -e "s/__MYSQL_PASSWD__/$clean_mysql_db/g"  \
          "$template" > "$drupal_root/sites/default/${local_settings}.php"
      else
        errcho "The $drupal_root/sites/default/settings.php file either doesn't exist, or does not utilize ${local_settings}.php"
      fi
    else
      errcho "Looks like $drupal_root/sites/default/${local_settings}.php already exists!"
    fi
  else
    errcho "There doesn't seem to be a $drupal_root/sites/default/ folder"
  fi
}

# Apache Helper Subcommands:

function accpl.adb() {
  accpl.__call_apachectl -S
  accpl.__call_apachectl configtest
}

function accpl.aa() {
  local log_dir log_file log_viewer options

  log_viewer="$(command -v lnav)"
  if [[ -z "$log_viewer" ]]; then
    log_viewer="tail"
    options='-f'
  fi

  # OSX and Ubuntu
  if [[ -d "/var/log/apache2" ]]; then
    log_dir="/var/log/apache2"
  elif [[ -d "/var/log/httpd" ]]; then
    log_dir="/var/log/httpd"
  else
    die "I don't know where your Apache logs are!" 127
  fi

  if [[ -r "$log_dir/access_log" ]]; then
    log_file="$log_dir/access_log"
  elif [[ -r "$log_dir/access.log" ]]; then
    log_file="$log_dir/access.log"
  else
    die "I don't know what your Apache access logs are named!" 127
  fi

  "$log_viewer" $options "$log_file"
}

function accpl.ae() {
  local log_dir log_file log_viewer options

  log_viewer="$(command -v lnav)"
  if [[ -z "$log_viewer" ]]; then
    log_viewer="tail"
    options='-f'
  fi

  # OSX and Ubuntu
  if [[ -d "/var/log/apache2" ]]; then
    log_dir="/var/log/apache2"
  elif [[ -d "/var/log/httpd" ]]; then
    log_dir="/var/log/httpd"
  else
    die "I don't know where your Apache logs are!" 127
  fi

  if [[ -r "$log_dir/error_log" ]]; then
    log_file="$log_dir/error_log"
  elif [[ -r "$log_dir/error.log" ]]; then
    log_file="$log_dir/error.log"
  else
    die "I don't know what your Apache error logs are named!" 127
  fi

  "$log_viewer" $options "$log_file"
}

function accpl.fp() {
  local apache_group files_root writable i chmod_options

  # Apache confs have "Group" but Ubuntu uses env vars, so for now use...
  apache_group="$(accpl.__call_apachectl -S | grep Group: | grep -o '"[^"]*"' | sed 's/"//g')"

  if [[ $# -gt 0 ]]; then
    files_root="."
    writable=(
      "$@"
    )
  elif accpl.__is_concrete5; then
    files_root="$(accpl.__get_concrete5_root)"
    # This list accomodates both version 5.6 and 5.7
    writable=(
      'application/config'
      'application/files'
      'config'
      'files'
      'packages'
      'updates'
    )
  elif accpl.__is_drupal; then
    files_root="$(accpl.__get_drupal_root)"
    writable=(
      'sites/default/files'
    )
  elif accpl.__is_joomla; then
    files_root="$(accpl.__get_joomla_root)"
    writable=(
      'administrator/cache'
      'administrator/components'
      'administrator/language'
      'administrator/manifests/files'
      'administrator/manifests/libraries'
      'administrator/manifests/packages'
      'administrator/modules'
      'administrator/templates'
      'cache'
      'components'
      'configuration.php'
      'images'
      'language'
      'libraries'
      'logs'
      'media'
      'modules'
      'plugins'
      'plugins/authentication'
      'plugins/captcha'
      'plugins/content'
      'plugins/editors'
      'plugins/editors-xtd'
      'plugins/extension'
      'plugins/finder'
      'plugins/quickicon'
      'plugins/search'
      'plugins/system'
      'plugins/twofactorauth'
      'plugins/user'
      'templates'
      'tmp'
    )
  elif accpl.__is_laravel; then
    files_root="$(accpl.__get_laravel_root)"
    writable=(
      'bootstrap/cache'
      'public/uploads'
      'storage'
    )
  elif accpl.__is_symfony; then
    files_root="$(accpl.__get_symfony_root)"
    writable=(
      'app/cache'
      'app/logs'
    )
  elif accpl.__is_wordpress; then
    files_root="$(accpl.__get_wordpress_root)"
    writable=(
      'wp-content'
    )
  else
    files_root="."
    writable=(
      "$@"
    )
  fi

  if accpl.__is_mac; then
    # http://apple.stackexchange.com/questions/13132/how-to-add-user-to-a-group-on-command-line
    if ! qt dseditgroup -o checkmember -m "$USER" "$apache_group"; then
      accpl.__verbose_run sudo dseditgroup -o edit -a "$USER" -t user "$apache_group"
    fi
  elif accpl.__is_linux; then
    # NOTE: adding a group doesn't show until user logs out and back in.
    if ! qt groups | grep -E "\\b$apache_group\\b"; then
      accpl.__verbose_run sudo usermod -a -G "$apache_group" "$USER"
    fi
  else
    die "Unrecognized \$OSTYPE: $OSTYPE" 1
  fi

  [[ ! -d "$files_root" ]] && mkdir -p "$files_root"

  accpl.__is_linux && chmod_options=-c || chmod_options=-vv

  for i in ${writable[*]}; do
    if [[ -d "$files_root/$i" ]] || [[ -f "$files_root/$i" ]]; then
      # Quick hack, to allow for symlinked folders. Find and chown have -L
      # option on OSX and Linux, but chmod does not under Linux.
      [[ -d "$files_root/$i" ]] && i="$i/"
      # For "prod" use:   sudo chgrp -R $apache_group "$files_root/$i"
      accpl.__verbose_run     sudo chown -R "$USER:$apache_group" "$files_root/$i"
      accpl.__verbose_run qte sudo chmod -R $chmod_options ug+rw "$files_root/$i" | grep -v "’ retained as "
      accpl.__verbose_run     sudo find "$files_root/$i" -type d -exec chmod $chmod_options g+s {} \; -a -exec chmod $chmod_options o-stw {} \; | grep -v "’ retained as "
    fi
  done
}

function accpl.els() {
  local drupal_root git_editor settings_file

  drupal_root="$(accpl.__get_drupal_root)"
  if [[ -f "$drupal_root/sites/default/local_settings.php" ]]; then
    settings_file="$drupal_root/sites/default/local_settings.php"
  elif [[ -f "$drupal_root/sites/default/settings.local.php" ]]; then
    settings_file="$drupal_root/sites/default/settings.local.php"
  elif [[ -f "$drupal_root/sites/default/settings.php" ]]; then
    settings_file="$drupal_root/sites/default/settings.php"
  fi

  if [[ ! -z "$settings_file" ]]; then
    git_editor="$(git config core.editor)" || git_editor="${EDITOR:-vim}"

    "$git_editor" "$settings_file"
  fi
}

# Misc. Helper Subcommands:

function accpl.ssh() {
  local branch cap_conf SSH user gateway

  branch="$(accpl.__get_git_current_branch)"
  cap_conf="$(qte accpl.__git_ls_grep "/${branch}.rb")"
  SSH="echo"
  if [[ -f "$cap_conf" ]]; then
    # config/deploy/prod.rb:15:ssh_options[:user] = 'deploy'
    user="$(git grep "ssh_options\\[:user\\]" "$cap_conf" | grep -E -o "('|\")[^'\"]+('|\")" | sed 's/[^0-9a-zA-Z.-]//g')"
    # config/deploy/prod.rb:8:set :gateway, 'xxx.xxx.xxx.xxx'
    gateway="$(git grep ":gateway" "$cap_conf" | grep -E -o "('|\")[^'\"]+('|\")" | sed 's/[^0-9a-zA-Z.-]//g')"
    [[ ! -z "$user" ]] && [[ ! -z "$gateway" ]] && SSH=ssh
    $SSH "$user@$gateway"
  else
    die "There doesn't seem capistrano config file for the $branch branch!" 1
  fi
}

function accpl.genssl() {
  # http://www.jamescoyle.net/how-to/1073-bash-script-to-create-an-ssl-certificate-key-and-request-csr
  # http://www.freesoftwaremagazine.com/articles/generating_self_signed_test_certificates_using_one_single_shell_script
  # http://www.akadia.com/services/ssh_test_certificate.html
  local domain C ST L O OU CN emailAddress password

  # Change to your company details
  C=US;  ST=Oregon;  L=Portland; O=$domain; # Country, State, Locality, Organization
  OU=IT; CN=$domain; emailAddress="$(git config user.email)"

  [[ -z "$1" ]] && domain=server || domain="$1"

  # Change to your company details
  C=US;  ST=Oregon;  L=Portland; O=$domain; # Country, State, Locality, Organization
  OU=IT; CN=$domain; emailAddress="$(git config user.email)"
  # Common Name, Email Address, Organizational Unit

  #Optional
  password=dummypassword
  # Step 1: Generate a Private Key
  openssl genrsa -des3 -passout pass:$password -out "${domain}.key" 2048 -noout
  # Step 2: Generate a CSR (Certificate Signing Request)
  openssl req -new -key "${domain}.key" -out "${domain}.csr" -passin pass:$password \
    -subj "/C=$C/ST=$ST/L=$L/O=$O/OU=$OU/CN=$CN/emailAddress=$emailAddress"
  # Step 3: Remove Passphrase from Key. Comment the line out to keep the passphrase
  openssl rsa -in "${domain}.key" -passin "pass:$password" -out "${domain}.key"
  # Step 4: Generating a Self-Signed Certificate
  openssl x509 -req -days 3650 -in "${domain}.csr" -signkey "${domain}.key" -out "${domain}.crt"

  ls -l "${domain}".*
}

function accpl.exfe() {
  local drupal_root features_root feature

  if accpl.__is_drupal; then
    drupal_root="$(accpl.__get_drupal_root)"

    feature="$(accpl.exam "$@" | tail +2 | sed 's|/.*$||' | grep -o '[^ ]*$' | sort -u)"
    features_root="$(accpl.__git_ls_grep "/$feature/" | sed 's|/[^/]*$||' | sort -u)"

    if [[ -n "$features_root" ]]; then
      features_root="${features_root%/*}"
    else
      if [[ -d "$drupal_root/sites/all/modules/features" ]]; then
        features_root="$drupal_root/sites/all/modules/features"
      elif [[ -d "$drupal_root/sites/all/modules/custom" ]]; then
        features_root="$drupal_root/sites/all/modules/custom"
      elif [[ -d "$drupal_root/sites/all/modules" ]]; then
        features_root="$drupal_root/sites/all/modules"
      else
        die "The $drupal_root/sites/all/modules folder doesn't seem to exist" 1
      fi
    fi
  else
    die "This doesn't seem to be a drupal project" 1
  fi

  local _pwd=$PWD
  cd "$features_root" || exit

  PREFIX=$_pwd accpl.ex "$@" && errcho "Extracted to: $features_root"
}

function accpl.dinit() {
    local stage="prod"
    [[ ! -z "$1" ]] && stage="$1"

    accpl.dls
    accpl.c

    cd "$(accpl.__get_git_root)" || exit

    cap "$stage" db:down
    accpl.seed "db/default_${stage}.sql"

    cap "$stage" files:pull
    accpl.fp "$@"

    gzip "db/default_${stage}.sql"
}

function accpl.exam() {
  accpl.ex "$@"
}

# https://github.com/myfreeweb/zshuery
#   Added "s around $variable, and in a for loop
function accpl.ex() {
  local i option_tar option_gunzip option_unrar option_unzip option_uncompress

  # For more info, while in bash: help caller
  if caller 0 | qt grep "\\.exam "; then
    option_tar=t
    option_gunzip=-t
    option_unrar=l
    option_unzip=-l
    option_uncompress="echo"
  else
    option_tar=x
    option_gunzip=
    option_unrar=x
    option_unzip=
    option_uncompress=
  fi

  for i in "$@"; do
    [[ ! -z "$PREFIX" ]] && [[ $i != /* ]] && i=$PREFIX/$i
    if [[ -f "$i" ]]; then
      errcho "Working on: $i"
      case "$i" in
        *.tar)        tar ${option_tar}vf   "$i";;
        *.tar.gz)     tar ${option_tar}vzf  "$i";;
        *.tgz)        tar ${option_tar}vzf  "$i";;
        *.tar.xz)     tar ${option_tar}vJf  "$i";;
        *.tar.bz2)    tar ${option_tar}vjf  "$i";;
        *.tbz2)       tar ${option_tar}vjf  "$i";;
        *.tar.lzma)   tar --lzma ${option_tar}vf "$i";;
        *.7z)         7z  ${option_tar}     "$i";;
        *.gz)   gunzip    ${option_gunzip}  "$i";;
        *.bz2)  bunzip2   ${option_gunzip}  "$i";;
        *.rar)  unrar     ${option_unrar}   "$i";;
        *.zip)  unzip     ${option_unzip}   "$i";;
        *.Z)    $option_uncompress uncompress "$i";;
        *.dmg)  hdiutul mount "$i";; # mount OS X disk images
        *) errcho "'$i' cannot be extracted via >ex<"
           return 1;;
      esac
    else
      errcho "'$i' is not a valid file"
      return 1
    fi
  done
}

function accpl.cd() {
  if accpl.__is_drupal; then
    local DRUPAL_CLONE drupal_version drupal_root git_root TMP

    DRUPAL_CLONE=$HOME/.ghq/git.drupal.org/project/drupal
    [[ ! -d "$DRUPAL_CLONE/.git" ]] && die "No drupal clone" 1

    drupal_version="$(accpl.__call_drush status drupal-version --format=list)"
    drupal_root="$(accpl.__get_drupal_root)"
    git_root="$(accpl.__get_git_root)"
    TMP="/tmp/drupal-$drupal_version-$$"

    mkdir -p "$TMP"
    qt pushd "$TMP" || exit

    for i in $(git --git-dir="$DRUPAL_CLONE/.git" archive "$drupal_version" | tar xvf - 2>&1 | sed 's/^x //' | grep -v '/$'); do
      diff -U 0 -N -w "$i" "$drupal_root/$i"
    done | tee "$git_root/core-diff.diff"
    errcho "$(tput setaf 3)Output saved to: $(tput setaf 5)'$git_root/core-diff.diff'$(tput sgr0)"

    qt popd || exit
    rm -rf "$TMP"
  else
    die "This doesn't look like drupal" 1
  fi
}

function accpl.cus() {
  if accpl.__is_drupal; then
    local DRUPAL_CLONE drupal_version

    DRUPAL_CLONE=$HOME/.ghq/git.drupal.org/project/drupal
    [[ ! -d "$DRUPAL_CLONE/.git" ]] && die "No drupal clone" 1

    drupal_version="$(accpl.__call_drush status drupal-version --format=list)"
    # TODO: programmaticlly determine prefix (vs. hard-coded 'drupal', and for
    # modules folder contents not in {contrib,custom,features}
    comm -13  <(git --git-dir="$DRUPAL_CLONE/.git" ls-tree --name-only -r "$drupal_version" | sed 's;^;drupal/;' | sort) \
              <(git ls-tree --name-only -r HEAD | grep -v -e sites/all/modules/contrib/ -e sites/all/libraries/ | sort)
  else
    die "This doesn't look like drupal" 1
  fi
}

# "main()" if not "source"-d
#   declare -F, for function names
#   declare -f, for function definitions
if [[ "${BASH_SOURCE[0]}" = "${0}" ]]; then
  # Allow for function names to be sym- or hard-linked to this script
  { qt type -t "accpl.${accpl_self}" && subcommand="$accpl_self"; } || {
    subcommand="$1"
    shift
  }

  case $subcommand in
    "" | "-h" | "--help")
      accpl.help
      ;;
    *)
      "accpl.${subcommand}" "$@"
      if [[ $? -eq 127 ]]; then
        cat <<EOT >&2
Error: '$subcommand' is not a known subcommand.
EOT
        exit $?
      fi
      ;;
  esac
fi
